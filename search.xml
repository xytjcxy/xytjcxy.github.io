<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[初入股市——太极实业暴跌]]></title>
    <url>%2F2019%2F12%2F23%2F%E5%88%9D%E5%85%A5%E8%82%A1%E5%B8%82%E2%80%94%E2%80%94%E5%A4%AA%E6%9E%81%E5%AE%9E%E4%B8%9A%E6%9A%B4%E8%B7%8C%2F</url>
    <content type="text"><![CDATA[写在最前：作为一名即将踏入社会的学生党，除了需要务实专业技能，另一个需要掌握的就是理财。2019.11-2020.6，这段时间，炒股无论盈亏，我都需要弄明白，今后我的钱，应该放哪儿？（写于2019/12/23） 此次全仓太极实业，是我的失误，具体体现在以下几点。 1）在未完全了解信息的情况下，就盲目建仓。炒股如果要从投机转换到理财，就必须对公司的基本面有着清晰的认识。而我此次，却在未完全掌握基本面的情况下，就盲目全仓，真的是找死！ 基本面分析： 太极实业的主要业务是十一科技和SK海力士半导体封测。 十一科技是国内最大的集成电路工程设计院，因此具有良好的发展前景。 海太半导体是太极实业和SK海力士联合投资的。SK海力士是世界前五的半导体公司，因此发展前景也是很好。那么第一个问题是，2020年6月，SK海力士会与SK海力士半导体续约吗？个人认为很大概率会！ 原因如下： 1&gt; 海太半导体是SK海力士花了10年培育出来的半导体封测公司，对其给予厚望。 2&gt; SK海力士占海太半导体45%的股份。因此，一荣俱荣，一损俱损。SK海力士不会轻易放弃自己的亲儿子的！ 3&gt; SK海力士与海太半导体合作多年，临时换一个合作伙伴，代价太大！ 太极实业是否存在增量空间。（这部分需要使用天眼查查询，暂时不清楚） 十一科技既然是国内最大的集成电路设计院，那么遵照龙头效应，必然存在较大的上涨空间。 海太半导体今年来的DRAM（内存）产量达12亿Gb，逐年稳步提升，目前全球生产占比13%。因此，增量也会有的。 4.15亿股的限售解禁 这里解释一下限售解禁。限售解禁股指的是，取得流通权的非流通股可以上市交易。换句话说，之前由于股权质押或者定向增发等原因得到的股票，在一定期限内是不允许卖出的。现在，他们4.9左右的成本股，在限售时间到期后，可以在股市上交易了。如果股价涨到8元，那么这批限售解禁股一旦卖出，利润率可达60%。所以为了避免抛售后暴跌的风险，在限售解禁前，大家一般都会将股价抛低。 这个是我唯一没有注意到的基本面，所以目前每股亏0.3，也是交学费了。 4.15亿股中，十一科技员工持股1.94亿（这部分大概率不会卖出。一旦卖出，要么是离职，要么是对公司未来不抱信心。但从公司目前的业绩来看，是有上涨空间的） 无锡创业投机集团有限公司持股1亿（这部分估计会卖出，60%的利润，已经很丰厚了，作为一家投资公司，最重要的是盈利，所以应该会慢慢抛售） 后面两家暂时不用考虑，但应该不会轻易抛售（无锡本地的投资公司，抛售股票赚现钱对当地经济发展不利） 该公司是否存在泡沫 判断一个公司是否被炒上天，一个很重要的依据就是它的动态市盈率（市盈率 = 股价 / 每股盈利）。太极实业的动态市盈率是26.39。同类龙头半导体企业都破百。可见，该公司的市盈率尚在合理范围内。 2）炒股需要有耐心目前投入股市的总金额达2万。对于学生党来说很多。但从长远来看，在有时间的时候，用2万来锻炼自己，是值得的。这也是为什么我决定在秋招结束后炒股。 散户的心态，我估计我全都有了。赚一点就喜滋滋，开始肆意消费。赔一点就郁郁寡欢，整日研究如何解套。但我似乎忘记了自己当初为什么要买这只股！ 我选择这只股，不是一个投机行为。是建立在我对它的基本面有着足够的了解后才决定的。我相信在看完那些基本面后，该企业每年的净利润增幅能达到30%。所以我决定下单！ 所以，我需要再对自己说，现在，不要关注每一天股价的波动。你需要关注它一直到3月份的股价，能否达到预期，11元！现在跌，给他跌，6.6这样就是底线了！我要计划，在11元左右的时候卖出。这，才是我要赚的！ （写于2019/12/24） 3）理性建仓，合理清仓会买的人是孙子，会卖的人是爷。今早莫名的一波涨停，令人猝不及防。在限售解禁和上证指数失守3000点这两个利空消息和大基金二期计划这一利好消息的双重作用下，太极实业今早涨停。在净赚5.78个点后，我还是忍不住卖了700股，占总持股的55%。这只股我的目标是11，现在8.32就卖了，不是我毅力不够，而是我认为合适的抄底时机应该在1月10日-2月10日（中间过年期间股市休市）。现在卖了，只是为当初对基本面的误判埋单。我相信它在1月20日解禁前后会迎来一个谷底。同时我也相信人们会忘记这只股的价值！ 如果当初建仓的时候，我没有全仓入，那么在它跌到7.4的时候，我就可以补仓了。当初建仓的时候一步到位，确实错失了很多机会！接下来会分两次共加仓800股，第一次是在其跌到7.8，第二次是在其跌到7.6。 现在卖出说到底就是贪，认为它还会跌！也许它再也不会跌到8以下了，但那只能说明我过于贪心，判断失误，为那部分少赚的利润，我负全责。 关于清仓，赚的时候慢慢清，到达设定值后，就直接清完。本来是不想减仓的，但那个限售解禁，就像是悬在头顶的达摩克利斯之剑。我相信它能涨到11，但需要越过1月20日这道坎。所以我选择先卖一部分，把已经握在手里的那部分利润攥紧。如果事后一直涨，我就少赚点。反之，如果跌到设定值，我也能加仓，平摊损失。总结来说就是，不奢求巨额利润，但我希望我的炒股不是一个投机行为，而是一个理财行为！1月20日，这是一道坎！ 4）一些奇景洗盘 刚开始的时候，我不清楚同花顺里面一直提到的庄家洗盘是什么意思。经历了这次，我算是明白了。这只股这么好，可就因为限售解禁这一个利空消息，引得无数人出售自己手中的股票。所谓洗盘，就是通过抛售手中的筹码，引起群众恐慌，压低股价，然后暗地里偷偷吸筹。既然过了1月20日，这只股就会涨至11，那么现在庄家就要以最低的成本获取尽可能多的成本，9以内买入对它而言都是赚的。如果不是这波洗盘，我相信我不会在8.32的时候就卖出55%的筹码，至少是要等到9的。 离奇的突然上升 在这次涨停之前，连续出现了3次突升。第一次突升，大家马上交出手中的筹码，股价迅速下跌。第二次突升，大家在逐渐认清了限售解禁后，股价没有任何犹豫的直线下跌。今天是第三次突升，剩下手中攥有筹码的，都是在等，打算等熬过1月20日，到了明年3月份，再清仓。可再坚定的意志，也难敌人的贪性。估计一大波人都计划着等跌到8以内再补仓，所以3小时还是消化了40万手，即4000万股！ 投资与压力 原计划投入股市的资金，不过1万。但在2个月的试水后（收益率超过15%），还是忍不住的加仓1万。第一个1万是我自己的钱，可支配资金。可第二个1万，是学校的助学贷款（无息）。如果不是觉得太极实业稳赚不赔（市盈率当时只有23），我不会下的去手。但第二个1万投下去后，压力真的太大了。虽然这1万不过是我未来半个月的工资，但毕竟是借来的，亏不得呀！ 现在想想，就明白为什么越穷的人，性子越急了。因为贫穷，因为被人用鄙夷的眼光看了太久，所以太想翻身了！想想自己高中的时候，何尝不是奢望父亲1年就能让家庭重回当年的盛况？因为贫穷，急于回本，没有长期持有一只股票的意志，追涨杀跌，最终将自己的本金一点点亏完。 所谓成功的秘诀，就是在缜密的完成计划制定后，机械的执行。中途不论遇到何种诱惑，都以超人的意志抵制，直至计划完成。 （写于2019/12/25） 5）投资的逻辑质地、波段、形态。用质地规避雷区，用波段规避好公司也疯狂下跌的可能，形态是具体落实行动的指南。圈定范围是单位面积之内效率更高的必要程序，用有限的精力做无限工作量的投资的最优方案是无为而治。 个人理解： 质地，指的是股票的基本面。你对这只股票的基本面到底有多全面的掌握，决定了这只股票的价值。只要股票的价格低于价值，就可以购买！ 波段，指的是购买应当位于股票大涨之前。再优质的股票，大涨过后也难逃大跌的命运。 形态，指的是决定要购买哪些股票后，就应当缓慢建仓，合理清仓。 圈定范围，指的是，人的精力是有限的，所以对股票的了解也是有限的。基本面做的再全面，也需要实时的更新该公司的相关消息。因此，应当精通某一领域的某几只股票。 6）未来股票持有计划planning。。。]]></content>
      <tags>
        <tag>用心体会股市</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[择一业，从一生]]></title>
    <url>%2F2019%2F10%2F15%2F%E6%8B%A9%E4%B8%80%E4%B8%9A%EF%BC%8C%E4%BB%8E%E4%B8%80%E7%94%9F%2F</url>
    <content type="text"><![CDATA[每年秋冬交季必会犯的鼻炎，今年又来了。原以为按照老做法，去医院开个药就完事了，结果倏地发现同济医院的耳鼻喉科居然暂时停诊了。 那位大夫是一位很和蔼的老太太，现已高龄，希望不要出什么事！ 还记得17年11月的时候，我鼻炎犯的特别厉害，时不时的就流鼻涕，透明的液体中夹杂着几根血丝，喷嚏一打就停不下来！当时我好害怕呀，真怕自己得鼻癌，所以也就一直不敢去医院看。后来实在受不了了，抱着最坏的打算，敲开了就诊室的大门。那位老奶奶见到我的第一句话就是，这病有多久了。我说，大概两周了。她问我为什么不一得就来看，又没多少钱。我说，我以为这是小事，过几天就好了。她耐心的教导我说，年轻人呀，你一有病就赶紧来医院看，这样才不会得大病，很多小病都是拖拖拖，最后拖成大病的。听到她这句话的时候，我不禁鼻子一酸，想起了自己的母亲，似乎一开始也只是小病，不按时吃饭。后来一直拖，舍不得花钱去医院看病，最后拖成胃癌。中国人呀，很多时候，总觉得不管什么大病，只要拖一拖，就会好的。可是，很多时候，就是拖一拖，小病拖成了大病，结果反而更糟！接着，老奶奶给我开了一点口服的药，嘱咐我出门要记得带口罩，不要让鼻子受风寒，说我这病就是来到上海受冻，才不停的打喷嚏的。按她的嘱咐，整个冬天，病再也没犯过。 今天去医院看病，医生稍微看了看，就直接和我说是过敏性鼻炎，然后给我开了一点口服的药，和两瓶喷雾。前前后后共花了150多。我和她说我不想用喷雾，因为我觉得外喷的药对身体不好（比如眼药水），可是她坚持让我用，因为觉得我鼻子肿的很严重。我真是呵呵了。我这鼻炎，最严重的时候就是17年11月的时候，那时候不仅流鼻涕，而且鼻涕中还带有血丝。可即使是那时候那么严重，也只是吃了点药就好了（18年也是吃点药就好了）。现在没多大事，你却说让我用喷雾，还说我会喜欢上这种药的，我TM真是。。。 其实我觉得我这人也挺犯贱的，想要在学术上攀登高峰，却又沉迷金钱的诱惑。本来作为同济土木的硕士生，在土木上有着优秀的专业素养，可又忍受不了金钱的诱惑，转行去学计算机。最后磕磕绊绊，去华为搞无线通信了。哎，过去了就过去了吧，等三方签完以后，就踏踏实实的在这个行业干一辈子吧。再也，不转了！]]></content>
      <tags>
        <tag>朝花夕拾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本硕985非科班的转行之路]]></title>
    <url>%2F2019%2F10%2F02%2F%E6%9C%AC%E7%A1%95985%E9%9D%9E%E7%A7%91%E7%8F%AD%E7%9A%84%E8%BD%AC%E8%A1%8C%E4%B9%8B%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[写在最前：之前答应了力扣的小姐姐，拿到offer就来分享一下面试经验。后来华为实习结束，等了一个月，终于在国庆前一天收到了华为的offer。薪资暂时未定，但应该不会想着去找其他企业了。如果不选华为，应该会考虑读博。 薪资目前已经定下来了，14级，尊重价。感谢一路帮助过我的人，希望此文能帮助那些转行迷茫的人儿！ 个人背景： 1）转行时间：两年，研一到研二 2）转行基础：零基础，啥语言都不会，敲个代码一堆bug 3）个人学历：本科，华南理工大学，土木与交通学院；研究生，同济大学，土木工程学院 4）个人荣誉：本科学渣一枚，但也捞到了一个奖学金。研究生阶段拿了一个全国研究生数学建模比赛三等奖 （这些荣誉都没多大含金量，放在这里只是想说明，当你信念足够坚定，菜鸡也是可以转行的） 本文分四个部分：1. 笔试分析 2. 面试分析 3. 行情分析 4. 心得感悟 一、笔试分析 笔者参加过腾讯、阿里、华为、字节跳动、拼多多、小红书、哔哩哔哩、哈啰单车、红星美凯龙云计算等企业的笔试。 腾讯常考的笔试题包括但不限于：贪心算法、二分查找、BFS、DFS、动态规划。腾讯的笔试题是一年比一年难，去年的题目我在牛客上基本都能做出来。但今年的题目，5道只会做两道，最后当然也就没offer啦。 阿里的笔试题比较迷，分内推笔试题和正式笔试题。内推笔试题会简单很多，基本去力扣上搜一下就是了。但如果是参加他们的正式笔试，题目相当难（或者不是说难，而是在一小时之内真的很难写完两道题，而且语言限定只准使用Java） 字节跳动的笔试题包括但不限于：二分查找、BFS、DFS、动态规划。字节跳动去年的笔试据说是最难的，但今年从整体做题感受上来说，我感觉腾讯的会更难。要过这三家大厂的笔试，多去牛客上刷互联网公司真题就好了（千万别信什么剑指offer66题，那不是笔试用的，是面试用的）。 剩下的华为、拼多多、小红书、哔哩哔哩、哈啰单车、红星美凯龙云计算这些企业的笔试题一般而言都比较简单，这里就不在赘述了。 总结：各大企业重点考察的笔试知识点包括，贪心算法、二分查找、BFS、DFS、动态规划。这类型问题如果没有解题思路，建议去力扣上找对应的题目进行练习。但真实的笔试题与力扣的题目又是有所区别的，因此，牛客网上的互联网公司真题应当作为重点，多刷刷。 二、面试分析 笔者参加过的面试包括：腾讯、阿里、华为、小红书、拼多多、中兴、红心美凯龙云计算。 腾讯是一家比较奇葩的企业，我其实一面就挂了。感觉它是完完全全把我当科班的来对待了，问的全是计算机组成原理、TCP/IP这方面的专业知识。在这方面，我确实比不上科班出身的各位，所以HR问了20分钟也就挂了。 阿里偏重于项目，主要针对我的项目进行询问。同时也问了我一些算法题，让我提供解决思路。由于它问的那道算法题我是真的没见过，没见过就是做不出来，所以阿里二面挂。 华为面试不具备参考价值，在此略过。 拼多多偏重于算法，我是一面挂。最后挂的原因在于，面试官让我手写一个合并区间的题目，我当时考虑的不够仔细，有许多错误，因此最后也就挂了。 小红书偏重于数据结构。三轮技术面，前两轮全是让我手写代码，最后一轮是考察智商。三轮技术面我全过，但最后挂在了HR面上，也挺无语的。不过没了就没了，就算拿到他们的offer，也不想去。 总结：对于非科班出身的，大企们对你也没啥好考察的。重点在于手写代码！腾讯、阿里、拼多多都是我在华为实习前面的，说实话，当时我也是参照网上的经验贴，人家说要准备哪些知识点，我就去准备。但现实是，我花一到两个月死记硬背的，怎么能和别人四年的积淀相比呢？所以，作为非科班，需要的是扎扎实实的代码功底。这里推荐一个很笨但很有效果的方法：刷力扣或者牛客上的题目时，我们要逼自己一把过，即，代码一提交就是正确的！同时，也要多刷刷剑指offer66题，记住，不是在电脑上敲出来就行了，要在纸上写！因为现场面试的手写代码，是不会给你第二次提交的机会的，你，只有一次机会！ 三、行情分析 这里我想告诉各位一个很不幸的消息，对于算法岗，各大厂基本已经饱和了。如果你是科班出身的，除了要能写的一手好代码，还得需要在顶会上有最少一篇文章。 想想15-17年，人工智能正处在风口上，安卓、IOS的火爆又促生了一大批新的开发需求。毫不夸张的说，那时候只要你是个人，想转行，就有人要，一点代码功底都不需要。但随着人工智能泡沫的破裂、安卓IOS开发需求的减少，各大公司现在都在缩招，想进去，没有一身过硬的本领是做不到的。 现在想转行对非科班真的太不友好了。这么说吧，以前非科班的转行，都是凭借着过硬的代码功底进入算法岗。但现在由于缩招，他们不仅要求你代码功底过硬，同时还需要你在顶会上发一到两篇文章！在计算机的顶会上发paper、发SCI？科班出身的都不一定能做得到，更何况非科班出身的了！到底有多难心里掂量一下就清楚了。 所以非科班们就只能往开发岗走了。其实我个人对算法并不感兴趣，而且在人工智能兴起之前，计算机毕业的学生也只是做开发的，所以别总觉得去开发就多low，相比于到现在还很难落地的人工智能，开发算是一个正路子吧！但非科班们转开发，如果是想去阿里，就需要对JVM有着很好的理解，该看的面经还得看。同时多去刷刷力扣数组类型的题目，也多做做剑指offer66题。手写代码一次过，这是成功转行的前提！ 总结：随着人工智能泡沫的破裂和安卓IOS开发需求的减少，转行变的越来越难。算法岗或许很难（过硬的代码功底+至少一篇顶会paper），但开发岗应该还有机会！开发主要用的是Java，因此，对于JVM，就需要有足够深入的理解，同时，也要花足够多的时间提升自己手写代码的能力。对于非科班出身的各位，在计算机网络、操作系统、TCP/IP上，你是经不住问的！但在专业知识方面，你只需要对JVM理解的足够深，一样是你的亮点！面试是有技巧的，你需要向别人展示你擅长的！但又是没有技巧的，因为拼到最后，比的就是你学习的深度！ 四、心得感悟 在转行的两年中（从研一到研二），我遇到了挺多贵人，也有幸能遇到力扣这么好的一个网站，提升自己的代码能力。九月份华为实习结束后，我只面了两家，一家小红书，一家中兴。小红书最后挂在了hr面上，我无话可说，可能是个人的价值观和它不一样吧。我仍然记得当时和华为的面试官聊天的时候，相谈甚欢，彼此相信，和优秀的人一起做对社会有意义的事，同时收获一份不菲的薪资，就是幸福的！但在小红书的面试过程中，字里行间，我都透露着小红书仍然需改进的情调，你让HR怎么想?最后给大家提几点想法吧！ 1）转行很难，作为本硕双985的，我都感觉转行很吃力！华为是一个很看重学历的企业，如果你不是双985，想进去真的很难。即使是，由于目前华为内部正在提高员工质量，笔试面试难度在增大，想进去也不容易！因此只有扎扎实实的提高自己的代码功底，才是王道。 2）各大网站的面经很多，但对于非科班的，如果你全信了，那基本也就凉了。阻碍我们的不是我们的学习能力，是时间！我们时间有限，只能挑重点。面试的重点是什么？一是自身过硬的代码能力，二是专业上对其中一项有着深入的认识，如果是Java开发，我强烈推荐JVM。 3）永远要记住，面试只有一次机会！所以每一次面试，都要做充足的准备，推掉那些不重要的琐事！在手写代码上，要保证自己思路清晰，一把过！ 4）行内有句话叫做，笔试刷牛客，面试刷力扣。由于笔试涵盖的知识点比较多，因此在学习知识点的过程中，建议刷力扣。力扣上可以看到优质的代码，这对个人代码质量的改进，有着极大的帮助，see the best，blind to the rest。但由于实际笔试是需要解决实际问题，因此也需要多刷刷牛客上的公司真题，来提高自己的阅读理解能力。面试题目大多考察基本的数据结构和一些取巧的算法，因此需要多刷力扣来扩充自己的知识面，但在刷力扣之前，建议先把剑指offer66题认真做完，因为那是基础中的基础。 （顺便透露一句，阿里、华为、小红书、拼多多、红星美凯龙云计算，面试要求的手写算法题，基本都是来源于力扣） 5）其实面试到最后，看的还是智商和paper。智商是没法变的，但paper是可以靠努力获取的！希望大家在自己的研究生生涯，除了为找工作作准备，也多花些时间在自己的科研上。无论是大公司还是小公司，比到最后，还是会看你的简历的！ 最后，祝愿大家都能在接下来的秋招中，找到自己心仪的offer！ 码字不易，如果有帮助，欢迎打赏~]]></content>
      <tags>
        <tag>朝花夕拾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[千八，难舍的遗憾]]></title>
    <url>%2F2019%2F09%2F15%2F%E5%8D%83%E5%85%AB%EF%BC%8C%E9%9A%BE%E8%88%8D%E7%9A%84%E9%81%97%E6%86%BE%2F</url>
    <content type="text"><![CDATA[千八，抱着遗憾，追逐遗憾，仍留遗憾~ 来同济的第一次徒步，是轻装七尖。第一次体会到，在肉体上，疲惫到极致的感觉。第一次体会到，勇敢迈出第一步，然后咬着牙闭眼走到终点的快感。第一次体会到，一个团队，无论队友多么差劲，不抛弃不放弃的真挚。 来同济的第二次重装，是重装三尖。不知道是因为自己背包不行，还是带的饮料太多，亦或是自己体能下降。一个单日的三尖，竟让我对重装有了畏惧。徒步的初始30分钟，我真有走不下去的绝望。还记得上一次这样的绝望，是发生在轻装七尖的第二日。 千八，一条把浙江省百分之八十的1800米山峰串联起来的经典大环线，号称”华东第一虐”，又有江浙沪第一高峰黄茅尖，对于我这样的受虐狂，可谓是勾魂摄魄！ 作为一群珍惜时间的”学霸”，自然要利用夜晚赶路，人生第一次夜宿服务区，也算是一次难得的体验吧~ 早上7点，抵达均益村，没有早饭，没有售水点，只带了四个面包的我，很是绝望QAQ。 中午12点，登顶凤阳山南峰=&gt;–&lt;= 如果是腐线，估计这会儿应该就扎帐睡觉了zZ。可跟着复旦这群老哥，还没休息30分钟，又开启了新一轮的征程o(&gt;﹏&lt;)o 下午两点途径猎户山庄，登顶黄茅尖的重要水源补给地（5元一瓶的550mL矿泉水和10元的1.25L肥宅快乐水你选哪个？反正我是选择健康的矿泉水了~）（plus，山庄的鸡蛋面大概是我吃过最美味的面了吧(^▽^)） 下午5点半，登顶黄茅尖（江浙沪第一高峰）！ 晚上赶路，白天徒步，不浪费每一分游玩时间，确实是我所憧憬的。钓鱼帽，凉袖，确实是防晒利器。隔绝了炎热的紫外线后，体力似乎都比以前充沛很多了！带上了两天的水，却没带足两天的午餐，我真是对自己无语了。。。 最后因水源不足，而被迫下撤，给这次千八之行，多少抹上了一丝遗憾。虽然领队说是因为水源不足而被迫下撤，但我认为，摆在面前的其实是一个赤裸裸的现实问题。当一个人有了充分的借口选择安逸，他还有多大的动力去拼搏呢？瓶子，一定是够的。有了瓶子，就可以去接溪水。如果真的想去，是可以坚持下来的。可是，继续前行，意味着领队需要承担更大的风险，背负更大的责任。而早已疲惫不堪的队友，又有谁会愿意在36℃的高温下继续前行呢？领队将团队安全放在第一位，无可厚非。而队员们，在有了充足的借口后，也能心安理得的下撤离开。可是，骗得了别人，却骗的了自己吗？ 最后，谈一谈情怀吧~ 第一个是关于女人，这是我最后一次谈感情，最后一次！ 出发前一天，在淘宝上订了一盒月饼，打算送给自己心心念念的女神。可是，她还是一如既往的拒绝了。如果能重来一次，我想我不会再那么鲁莽的表白了吧。年少轻狂的我，有着一腔热血，坚定的相信自己的直觉。相信喜欢一个人就是喜欢一个人，勇敢的去表达自己的爱意就好了。可惜事实是，喜欢是真心的，想要撩到手却需要套路╮(╯▽╰)╭。罢了罢了，我发现，无论我花多少时间在女生身上，收到的回报永远是0。以后，再也不撩了！努力提升自己，结交一帮志同道合的朋友，以赤子之心，去面对未来，其实，也是一种快乐！生活本不易，珍惜、爱护、体谅、关怀身边对自己好的人，不卑不亢的活出自己的风采，去，去tm的女人，我不需要，再也不需要了！ 第二个是关于决策。 我一直认为，每一个决策，并没有对错，而在于谁能说服对方，并将这份决策执行到底。 虽然最后的决策是下撤，但下撤就一定是正确的吗？我并不这么认为！ 如果我们的压队心狠一点，逼着我们强行走下去，我们真的走不下去吗？钢铁是怎么炼成的？没有熊熊烈火的打磨，又怎会有削铁如泥的宝剑呢？ 可是，最后的结果是，领队说服了压队，所以我们下撤了。我们的压队，虽然心有猛虎，可是每次遇到决策，都有点太佛系了。 不过，那种情况，换做是谁，都没法拿着大家的生命开玩笑，只要有一个人提出下撤，那么他就是属于正义的一方的，他就能很轻松的说服大家。能解此局的唯一方法，就是对路线足够熟悉，能精确的计算出之后的行程到底需要花多久时间。只有钻研的足够深入，才能在面对他人质疑的时候作出铿锵有力的回答。 第三个还是关于担当。 每一次集体聚餐，我似乎总是放不开，总是行动迟缓。做起事来犹犹豫豫，比别人慢板怕。男人呀，做起事来，还是要有些担当的呀！因为没有担当，失去了挚爱，抱憾终身，愿悲剧，不会再次上演！]]></content>
      <tags>
        <tag>朝花夕拾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[华为实习复盘分析]]></title>
    <url>%2F2019%2F08%2F24%2F%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%E5%A4%8D%E7%9B%98%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[华为实习复盘分析眨眼之间，两个月的华为实习就结束了。纵有千般不舍，然天下无不散之筵席，该分别时还是得分别。这两个月的实习，可谓干货满满，我甚至怀疑，人生未来的道路，还能不能有像这两个月这么快乐的成长了。 华为教会我的有很多，可以总结如下：1）沟通合作 2）PPT制作与展示 3）做人与做事 4）高效学习 1. 沟通合作华为里面，最喜欢的事情就是拉通对齐，每当接到一个新的需求，几个部门的大佬首先要花很长时间进行拉通对齐，思想统一，然后才会开展任务。华为优秀的人有很多，干起事情来都很快。但是，每一个伟大的成果，都一定不是单个小团队完成的。而一旦涉及到成百上千的多人协作，必然只有将大家思想统一了，才不会有事后返工，导致效率低下。这，大概就是磨刀不误砍柴工吧！ 总结：涉及到多人协作的工作，一定不要吝惜和别人思想拉通对齐的时间，工欲善其事必先利其器！ 2. PPT制作与展示其实我研究生生涯的前半段算是蛮惨的，一直到19年之前，我都没有开过一次组会，更别提在别人面前展示自己了。长期没有练习自我展示，导致自己的ppt制作能力，演讲能力，都十分潳弱。而由于自小就受到文学作品的影响，对于那些擅长展示的人，也一直没有好感。可是，这个社会，是需要被引导的，而引导，需要展示！ 以前做ppt的时候常常很装逼，自以为字越少越好，然后自信满满的觉得，到时候只需要自己临场发挥即可。一直沉浸在自己的简洁之美中。可是，真正的现实是，本身就不是一块擅长临场发挥的料，在需要展示自己工作量的场合，怎么可能对着一张单薄的ppt，滔滔不绝呢？对于展示自己成果的场合，就应当将自己做了什么，都事无巨细的展示出来，同时，只对自己做的，有价值的方面，进行一带而过的讲解。如果它足够吸引别人眼球，自然会有人提问的！ 单薄的ppt是永远得不到别人尊重的，只有干货满满的ppt，才会吸引别人眼球，博得他人尊重。而只有你做的得到了他人的认可，才能推广你的成果！其次就是展示。每一次展示，都应该将自己的讲稿烂熟于心。可是我，直到答辩前的最后一天，都还在修改讲稿，又怎么能做到烂熟于心呢？想想自己从小就讨厌背书，对于死记硬背的人，天然鄙视。可是，语言方面的学习，最好的捷径就是背书！因为背的不熟，导致是演讲过程要么语速过快，别人听不懂。要么就是磕磕绊绊，总有停顿。 这份ppt，如果做得好，可以多2k的月薪呀。可是到最后，无论师父如何帮忙，效果总还是那么不尽人意~ 总结：ppt的制作内容一定要多，将自己的成果展示出来。然而演讲的时候，只需挑重点的，有把握的讲解。对于值钱的演讲，演讲稿一定要背的烂熟于心。剩下的，就是对演讲进行发音练习了！ 3. 做人做事做人，我觉得我是蛮失败的。不知道是因为自己对朋友要求太高，还是因为自己性格太高冷，长久以来，能真正进入我内心的朋友，高中两个，大学两个，研究生三个。朋友，一直对我是一个奢侈品，他们的每一个，我都很珍惜！ 但对周围的其他人，我似乎一直都很高冷。可是，我和他们的快乐，并不相通呀！上周看哪吒的时候，最触动我的一幕其实是敖丙和哪吒在沙滩上踢毽子的一幕。当时，我突然感觉，既然自己喜欢天才，那么就只有让自己成为天才，才能和他们在同一频道上玩耍。和那些每天浑浑噩噩的人在一起，真的玩不动。 但这也无法掩饰我对教人的不耐烦。在华为实习的两个月，我遇到了很多问题，很多都是通过请教周围同事才最后找到答案的，想想自己以前还挺乐意教人的，现在不愿意去教，大概是因为自从转行后，对自己做的很多东西，都没有把握吧！ 但是，即时不愿意去教别人，也要尝试去关心一下周围其他人呀，只有互相帮助，才会有一个融洽的团队氛围。这，不正是自己所期待的工作环境吗？ 做事，我也觉得我以前很多事都做的不好。可能因为某些原因，自己一直不够有担当。自从开始独居，不自觉的回想起了很多过去的往事。曾经，我也遇到过两位想共度余生的女生。可惜，最后都错过了！第一位，两情相悦。只可惜，我当时一直没有面对未来的勇气，总是在想如果在一起会怎么怎么样。作为男人，我始终少了一份担当的勇气。因为少了这份魄力，我，错过了一段真挚美好的感情。我曾无数次回想起当年一起相处的情景，然后一次次告诉自己在当时那种场景下，我真的没的选。可是，在实习期间，当自己真的开始冷静独处了一段时间后，我才发现，自己，真的少了一份担当。对未知始终有一份莫名的恐惧。可是，纵使未来很难，难道我就不能解决吗？人这一生，能遇到一个自己喜欢的，同时也喜欢自己的另一半，实在是太难了，可遇而不可求！男人应该有担当，是我缺少的素养！第二位，刚开始对我很好，大家彼此都聊的很开心，可故事发展到后面，由于我没有珍惜那唯一一次的约会机会，最终导致了现在的局面。在第一次，也是最后一次和她相约游玩的时候，我居然满脑子想着下次玩什么，对这一次的约会，居然完全不做计划。我呀，真的拜托把当前事务做好后，再去想下一件事吧！想想自己，一直以还有很多事要做为借口，没有把手头的事做的尽善尽美。其实本来这次答辩的CI出bin，我是可以有很好结果的，可是最后因为自己懒，自己不愿意对CI体系深入了解，导致最后一天仓皇补救，最终的结果，也没有达到自己的预期。你，本可以做的更好的！只有一件事做好了，才有资格去做下一件事。一阶段，只做好一件事！ 总结：做人，对身边自己好的人，其实真的要多去关心一下的。关心别人，并不丢脸！做事，请多一份担当，请对自己做的每一件事都负责，请把每一件事都做好后，再去做下一件事！ 4. 高效学习这个标题叫做高效学习，但人世间的成功，哪有捷径可走？要想做的比别人好，就一定得投入比别人多的时间。但有一点是所有优秀的人的共识——总结！以前，我总是不喜欢总结。一件事做完以后，觉得早上时间太宝贵，不能拿来总结。嫌弃下午没睡好，不去总结。觉得晚上太累，不愿总结。周而复始，做的事情再多，由于缺少总结，事半功倍，因此做的事情大多很低端！ 总结：世间再没有什么事情比学习更简单了。投入足够多的时间，每一阶段做好总结，每日三省吾身，即可！]]></content>
      <tags>
        <tag>朝花夕拾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 1157 通过随机数来碰运气过OJ]]></title>
    <url>%2F2019%2F08%2F11%2F%E9%80%9A%E8%BF%87%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%9D%A5%E7%A2%B0%E8%BF%90%E6%B0%94%E8%BF%87OJ%2F</url>
    <content type="text"><![CDATA[思路： 本题我之前想过是否有什么方法可以过，但似乎没有必定正确的方法。如果有，应该也只是c++和Java的暴力法能过了。 一个取巧的方法，随机在left和right中取100个数，记录这100个数的出现次数。如果数的种类超过3个，只有出现次数大于10的才去判断是否大于阈值。如果种类小于3个，则所有的数都参与判断。 时间复杂段300 O(log n) 12345678910111213141516171819202122232425262728293031import collectionsimport randomimport bisectclass MajorityChecker: def __init__(self, arr): self.array = arr self.arr = collections.defaultdict(list) for i in range(len(arr)): self.arr[arr[i]].append(i) def query(self, left: int, right: int, threshold: int) -&gt; int: a = collections.defaultdict(int) for i in range(100): p = self.array[random.randint(left, right)] a[p] += 1 keys = [] if len(a.keys()) &gt; 3: for k in a.keys(): if a[k] &gt; 10: keys.append(a[k]) else: keys = a.keys() for k in keys: l = bisect.bisect(self.arr[k], left - 1) r = bisect.bisect(self.arr[k], right) if r - l &gt;= threshold: return k return -1]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 1156 需要通过观察找出规律]]></title>
    <url>%2F2019%2F08%2F11%2F1156-%E9%9C%80%E8%A6%81%E9%80%9A%E8%BF%87%E8%A7%82%E5%AF%9F%E6%89%BE%E5%87%BA%E8%A7%84%E5%BE%8B%2F</url>
    <content type="text"><![CDATA[思路：本题如果要实现字符串长度增长，只需要考虑两种场景。 aaabaaa，对于b，左和右相等，这时候，总长度是len(left)+len(right)+int(total(a)&gt;current(a)) aaabba，对于a，长度为len(a)+int(total(a)&gt;current(a)) 因此，代码如下 123456789class Solution: def maxRepOpt1(self, text: str) -&gt; int: grap = [[c,len(list(v))] for c,v in itertools.groupby(text)] num = collections.Counter(text) res = max(min(k+1,num[c])for c,k in grap) for i in range(1,len(grap)): if grap[i][1]==1 and i+1 != len(grap) and grap[i-1][0]==grap[i+1][0]: res = max(res,min(grap[i-1][1]+grap[i+1][1]+1,num[grap[i-1][0]])) return res]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 1146 二分查找]]></title>
    <url>%2F2019%2F08%2F04%2FLeetCode-1146-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%2F</url>
    <content type="text"><![CDATA[思路： 数组保存所有数。同时，每个set只记录增量，通过二分查找得到最近snap的数。 关键点，对于没有set的数，即使snap了，也和上一个snap_id是一样的。 12345678910111213141516171819# 这里之所以要用float('inf')的原因是，这样当出现第一项相同时，必然往后靠import bisectclass SnapshotArray: def __init__(self, length: int): self.snaps = [[[-1,0]] for i in range(length)] self.snap_id = 0 def set(self, index: int, val: int) -&gt; None: self.snaps[index].append([self.snap_id,val]) def snap(self) -&gt; int: self.snap_id+=1 return self.snap_id-1 def get(self, index: int, snap_id: int) -&gt; int: idx = bisect.bisect_right(self.snaps[index],[snap_id,float('inf')])-1 return self.snaps[index][idx][1]]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git获取指定svn版本的代码]]></title>
    <url>%2F2019%2F08%2F03%2Fgit%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9Asvn%E7%89%88%E6%9C%AC%E7%9A%84%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[前言本文主要介绍如何通过git，获取svn指定版本号的代码 svn的下载、安装、配置参见https://blog.csdn.net/WinstonLau/article/details/79794967 对同一个项目同时使用svn参见https://blog.csdn.net/zzxiang1985/article/details/75212244 本文是因为项目需要，所以必须将svn的版本号和git的节点号对齐。如果你刚开始创建自己的项目，建议还是使用git，毕竟这是主流，同时也方便离线提交代码！ 在git仓库中与远程的svn仓库关联1234# -r 1:HEAD,表示更新从版本1到最新版本的svn仓库# svn://localhost,表示svn远程仓库的url# .,表示将clone的svn更新到当前文件夹下git svn clone -r 1:HEAD svn://localhost . git查询指定svn版本对应的节点假设我想查询r4对应的git节点号 12git svn reset r4# 会显示：r4 = 4945ec51baa115ecce9b7fdf78aa8ae716345855 (refs/remotes/git-svn) 将git回退至指定版本1git reset --hard 4945ec51baa115ecce9b7fdf78aa8ae716345855 将git由当前svn版本更新至最新svn版本1234# git查询当前svn所属版本号，比如我当前是4git svn log# 将git更新至svn最新节点git svn fetch -r 4:HEAD]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 1140 化整为零的DP求解思路]]></title>
    <url>%2F2019%2F07%2F28%2F%E5%8C%96%E6%95%B4%E4%B8%BA%E9%9B%B6%E7%9A%84DP%E6%B1%82%E8%A7%A3%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[思路：本题是要求解在1:n的石子堆内，先出手者的最大收益。 dp(i,j)表示，i:n的石子堆内，先出手者的最大收益。 代码：1234567891011121314151617181920212223class Solution: def stoneGameII(self, piles: List[int]) -&gt; int: piles.insert(0, 0) n = len(piles) for i in range(1, n): piles[i] += piles[i - 1] a = [[0] * n for i in range(n)] def dp(i, j): if n - i &lt;= 2 * j: return piles[n - 1] - piles[i - 1] if a[i][j] &gt; 0: return a[i][j] for k in range(2 * j): if i + k &gt;= n: break if a[i][j] == 0: a[i][j] = piles[n - 1] - piles[i - 1] - dp(i + k + 1, max(k + 1, j)) else: a[i][j] = max(a[i][j], piles[n - 1] - piles[i - 1] - dp(i + k + 1, max(k + 1, j))) return a[i][j] return dp(1, 1) 反思：dp问题分两种，1）每增加一项，寻找第i项与第i-1项之间的递推关系。2）将大的范围，逐渐减小至小范围，临界条件已知，最后求解大范围处的值。]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scons介绍]]></title>
    <url>%2F2019%2F07%2F28%2FScons%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[Scons介绍1 简介Scons是一个python写的编译工具，与makefile功能类似，但能兼容makefile，同时更加智能，可以自动解析系统的include路径、typedef等。 2 Scons文件1）配置文件：与scons命令位于同一目录下的SConstruct、Sconstruct、sconstruct文件 2）SConstruct使用函数SConscript()来定附属配置文件，这些附属配置文件被命名为SConscript。附属配置文件将脚本内的目标文件编译后传给SConstruct 学习参考：https://blog.csdn.net/sealyao/article/details/6402257]]></content>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[华为实习——痛苦&快乐]]></title>
    <url>%2F2019%2F07%2F27%2F%E7%97%9B%E8%8B%A6%E5%B9%B6%E5%BF%AB%E4%B9%90%E7%9A%84%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[这周的心情，应该算是跌入谷底了吧。一篇杂谈，吐槽我低落的心情~ 师父让我做一个自动出bin的工具，思路很简单，但当所有的需求都完成后，我居然花了一周。 今年华为的校招形势比往年都严峻，我不清楚我得多努力才能被认可，才能被留用。 在华为每天准点下班，居然被师父怼了。他对我的训斥，记忆犹新——命运要掌握在自己的手里，不要交给运气。如果你不好好干，就回去继续搞土木吧！ 之前一直以为答辩时间早8月底，所以就一直很放松。但没想到提前到8月中旬了。时间不等人，我得马上进入备考状态了！ 之前答应老师的一篇论文，估计8月底写不出来了。成果都有了，但如果让我现在分心去写论文，我做不到。上次面试阿里的悲剧，我绝不要重复！ LTE的那本书总算到了，接下来得要好好准备复习之前所学的内容了。 如果我们组今年只招1个，我一定要努力到，能留用的那1个就是我！I am the best, others are trashes!]]></content>
      <tags>
        <tag>朝花夕拾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 1131 最远曼哈顿距离]]></title>
    <url>%2F2019%2F07%2F21%2FLeetCode1131-%E6%9C%80%E8%BF%9C%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[题目：给你两个长度相等的整数数组，返回下面表达式的最大值： 1|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j| 其中下标 i，j 满足 0 &lt;= i, j &lt; arr1.length。 思路：其实这道题的引申问题也就是求最远曼哈顿距离。而最远曼哈顿距离也可以引申为新增一个点，求该点到一群点的最大曼哈顿距离。 最大曼哈顿距离的求解方法： 1234|x1 - x2| + |y1 - y2| 等价于 x1-x2 + y1-y2 (1,1), -x1+x2 + -y1+y2 (-1,-1), x1-x2 + -y1+y2 (1,-1), -x1+x2 + y1-y2 (-1,1) 也就等价于 (x1,y1)-(x2,y2),(-(x1,y1))-(-(x2,y2)),(x1,-y1)-(x2,-y2),(-x1,y1)-(-x2,y2)最后的最大距离的点，必然是位于这四种情况中的某一种，因此对于每种情况，保留其中的min坐标，对于新加入的点，若为最大，必然是减去min坐标 12345678910class Solution: def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -&gt; int: res = 0 for i, j in [[1, 1], [1, -1], [-1, -1], [-1, 1]]: close = arr1[0] * i + arr2[0] * j for k in range(1, len(arr1)): p = arr1[k] * i + arr2[k] * j + k res = max(res, p - close) close = min(close, p) return res 反思：这道题其实很有借鉴意义，因为之前面试的时候就遇到过这道题，结果没有做出来。原来就是四种情况，每次保存每种情况最小的那个坐标即可。]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode1130-DP]]></title>
    <url>%2F2019%2F07%2F20%2Fleetcode1130%2F</url>
    <content type="text"><![CDATA[leetcode 1130 思路: dp[i,j]=min(dp[i,k]+dp[k+1,j]+max(arr[i:k+1])*max(arr[k+1:j+1]) 因此，直接使用dp函数求解 12345678910111213141516class Solution: def mctFromLeafValues(self, arr: List[int]) -&gt; int: a = [[0] * len(arr) for i in range(len(arr))] def dp(i, j): if i == j: return 0 if a[i][j] != 0: return a[i][j] res = float('inf') for k in range(i, j): res = min(res, dp(i, k) + dp(k + 1, j) + max(arr[i:k + 1]) * max(arr[k + 1:j + 1])) a[i][j] = res return res return dp(0, len(arr) - 1) 反思：因为很久没有做leetcode的题目了，结果这道这么简单的题都没有做出来，是时候反省一下自己了。为什么最近自己总是想着玩，没有认真对待自己的代码。对于coder而言，代码就是自己的尊严呀！]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
</search>
